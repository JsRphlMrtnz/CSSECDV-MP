/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.Main;
import Controller.SQLite;
import Model.User;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author beepxD
 */
public class MgmtUser extends javax.swing.JPanel {

    public SQLite sqlite;
    public Main main;
    public DefaultTableModel tableModel;
    private ArrayList<User> usersList;
    
    private static final int MIN_PASSWORD_LENGTH = 8;
    private static final int MAX_PASSWORD_LENGTH = 64;

    public MgmtUser(Main main) {
        initComponents();
        this.main = main;
        this.sqlite = main.sqlite;
        tableModel = (DefaultTableModel) table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));

//        UNCOMMENT TO DISABLE BUTTONS
//        editBtn.setVisible(false);
//        deleteBtn.setVisible(false);
//        lockBtn.setVisible(false);
//        chgpassBtn.setVisible(false);
    }

    public void init() {
        //      CLEAR TABLE
        for (int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--) {
            tableModel.removeRow(0);
        }

//      LOAD CONTENTS
        this.usersList = sqlite.getUsers();
        for (int nCtr = 0; nCtr < usersList.size(); nCtr++) {
            tableModel.addRow(new Object[]{
                usersList.get(nCtr).getUsername(),
                usersList.get(nCtr).getPassword(),
                usersList.get(nCtr).getRole(),
                usersList.get(nCtr).getLocked()});
            usersList.get(nCtr).getNumLoginAttempts();
        }
    }

    public void designer(JTextField component, String text) {
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        editRoleBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        lockBtn = new javax.swing.JButton();
        chgpassBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Username", "Password", "Role", "Locked"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(160);
            table.getColumnModel().getColumn(1).setPreferredWidth(400);
            table.getColumnModel().getColumn(2).setPreferredWidth(100);
            table.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        editRoleBtn.setBackground(new java.awt.Color(255, 255, 255));
        editRoleBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editRoleBtn.setText("EDIT ROLE");
        editRoleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoleBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        lockBtn.setBackground(new java.awt.Color(255, 255, 255));
        lockBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lockBtn.setText("LOCK/UNLOCK");
        lockBtn.setToolTipText("");
        lockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockBtnActionPerformed(evt);
            }
        });

        chgpassBtn.setBackground(new java.awt.Color(255, 255, 255));
        chgpassBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chgpassBtn.setText("CHANGE PASS");
        chgpassBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chgpassBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editRoleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(lockBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(chgpassBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chgpassBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editRoleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lockBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editRoleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRoleBtnActionPerformed

        if (table.getSelectedRow() >= 0) {
            User selectedUser = this.usersList.get(table.getSelectedRow());
            User currentUser = main.getCurrentUser();
            
            if (currentUser.getRole() == 5) {
                // Authorization Check: Prevent an admin from changing their own role
                if (currentUser.getUsername().equals(selectedUser.getUsername())) {
                    JOptionPane.showMessageDialog(this, "You cannot edit your own role.", "Action Forbidden", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (selectedUser.getRole() == 5) { // Prevent an admin from changing another admin's role.
                    JOptionPane.showMessageDialog(this, "You cannot edit another admin's role", "Action Forbidden", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                String[] options = {"1-DISABLED", "2-CLIENT", "3-STAFF", "4-MANAGER", "5-ADMIN"};
                JComboBox optionList = new JComboBox(options);

                optionList.setSelectedIndex((int) tableModel.getValueAt(table.getSelectedRow(), 2) - 1);

                String result = (String) JOptionPane.showInputDialog(null, "USER: " + selectedUser.getUsername(),
                        "EDIT USER ROLE", JOptionPane.QUESTION_MESSAGE, null, options, options[(int) tableModel.getValueAt(table.getSelectedRow(), 2) - 1]);

                if (result != null) {
                    int newRole = Integer.parseInt(result.substring(0, 1));

                    // Authorization Check: Prevent an admin from creating another admin or a role higher than theirs
                    if (newRole >= currentUser.getRole()) {
                        JOptionPane.showMessageDialog(this, "You cannot assign a role equal to or higher than your own.", "Action Forbidden", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    sqlite.updateUserRole(selectedUser.getId(), newRole);
                    init();
                }
            }else{
                JOptionPane.showMessageDialog(this, "You do not have permission to perform this action.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user from the table first.", "No User Selected", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_editRoleBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if (table.getSelectedRow() >= 0) {

            User selectedUser = this.usersList.get(table.getSelectedRow());
            User currentUser = main.getCurrentUser();

            // Authorization Check: Only an admin can delete a user.
            if (currentUser.getRole() == 5) {
                // Authorization Check: Prevent self-deletion
                if (currentUser.getUsername().equals(selectedUser.getUsername())) {
                    JOptionPane.showMessageDialog(this, "You cannot delete your own account.", "Action Forbidden", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Authorization Check: Prevent an admin from deleting another admin
                if (selectedUser.getRole() == 5) {
                    JOptionPane.showMessageDialog(this, "You cannot delete another admin's account.", "Action Forbidden", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + selectedUser.getUsername() + "?", "DELETE USER", JOptionPane.YES_NO_OPTION);

                if (result == JOptionPane.YES_OPTION) {
                    sqlite.removeUser(selectedUser.getUsername());
                    init();
                }
            } else {
                JOptionPane.showMessageDialog(this, "You do not have permission to perform this action.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
            }

        }else{
            JOptionPane.showMessageDialog(this, "Please select a user from the table first.", "No User Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void lockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockBtnActionPerformed
       
        if (table.getSelectedRow() >= 0) {
            User selectedUser = this.usersList.get(table.getSelectedRow());
            User currentUser = main.getCurrentUser();

            // Authorization Check: Only an admin can lock a user.
            if (currentUser.getRole() == 5) {
                // Authorization Check: Prevent self-lock
                if (currentUser.getUsername().equals(selectedUser.getUsername())) {
                    JOptionPane.showMessageDialog(this, "You cannot lock your own account.", "Action Forbidden", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Authorization Check: Prevent an admin from locking another admin
                if (selectedUser.getRole() == 5) {
                    JOptionPane.showMessageDialog(this, "You cannot lock another admin's account.", "Action Forbidden", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                String state = "lock";
                if(selectedUser.getLocked() == 1){
                    state = "unlock";
                }

                int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to " + state + " " + selectedUser.getUsername() + "?", "DELETE USER", JOptionPane.YES_NO_OPTION);

               
                int newStatus = (selectedUser.getLocked() == 0) ? 1 : 0;
                
                if (result == JOptionPane.YES_OPTION) {
                    sqlite.updateUserLockStatus(selectedUser.getId(), newStatus);
                    init();
                }
            }else{
                JOptionPane.showMessageDialog(this, "You do not have permission to perform this action.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user from the table first.", "No User Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_lockBtnActionPerformed

    private void chgpassBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chgpassBtnActionPerformed
        if (table.getSelectedRow() >= 0) {
            User selectedUser = this.usersList.get(table.getSelectedRow());
            User currentUser = main.getCurrentUser();
            
            JTextField password = new JPasswordField();
            JTextField confpass = new JPasswordField();
            
            designer(password, "PASSWORD");
            designer(confpass, "CONFIRM PASSWORD");
            
            // Authorization Check: Only an admin can change a user's password.
            if (currentUser.getRole() == 5) {                
                // Authorization Check: Prevent an admin from changing another admin's password.
                if (selectedUser.getRole() == 5 && !currentUser.getUsername().equals(selectedUser.getUsername())) {
                    JOptionPane.showMessageDialog(this, "You cannot change another admin's password.", "Action Forbidden", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                Object[] message = {
                    "Enter New Password:", password, confpass
                };

                int result = JOptionPane.showConfirmDialog(null, message, "CHANGE PASSWORD", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

                if (result == JOptionPane.OK_OPTION) {
                    // If password and confirm password are not the same
                    if(!password.getText().equals(confpass.getText())){
                        JOptionPane.showMessageDialog(this, "The passwords you entered do not match. Please try again.", "Passwords Mismatch", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    
                    if(password.getText().length() < MIN_PASSWORD_LENGTH || password.getText().length() > MAX_PASSWORD_LENGTH){

                        String errorMessage = String.format("Password must be between %d and %d characters long.",
                                       MIN_PASSWORD_LENGTH, MAX_PASSWORD_LENGTH);

                        JOptionPane.showMessageDialog(this, errorMessage, "Invalid Password Length",
                                       JOptionPane.WARNING_MESSAGE);

                        return;
                    }
                    
                    boolean success = sqlite.changePassword(selectedUser.getId(), password.getText());
                    if (success) {
                        JOptionPane.showMessageDialog(this, "Password updated successfully.");
                    } 

                    init();
                }
            }else{
                 JOptionPane.showMessageDialog(this, "You do not have permission to perform this action.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
            }  
        }else{
             JOptionPane.showMessageDialog(this, "Please select a user from the table first.", "No User Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_chgpassBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chgpassBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editRoleBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lockBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
